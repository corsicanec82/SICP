#lang sicp

(define (sqrt x)
  (sqrt-iter 1.0 x))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (cube-improve guess x)
                 x)))

(define (good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.0001))

(define (improve guess x)
  (average guess (/ x guess)))

(define (cube-improve guess x)
  (/ (+ (/ x (square guess))
        (* 2 guess))
     3))

(define (average x y)
  (/ (+ x y) 2))

(define (cube x)
  (* x x x))

(define (square x)
  (* x x))

(define (better-sqrt x)
  (better-sqrt-iter 1.0 0.5 x))

(define (better-sqrt-iter guess prev-guess x)
  (if (better-good-enough? guess prev-guess)
      guess
      (better-sqrt-iter (cube-improve guess x) guess x)))

(define (better-good-enough? guess prev-guess)
  (< (abs (- guess prev-guess)) 0.0001))

(sqrt -27)
(better-sqrt 1)